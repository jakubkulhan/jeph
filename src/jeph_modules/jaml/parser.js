module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "element": parse_element,
        "children": parse_children,
        "id": parse_id,
        "__": parse___,
        "attribute": parse_attribute,
        "braced": parse_braced,
        "line": parse_line,
        "blank": parse_blank,
        "EOL": parse_EOL,
        "EOS": parse_EOS,
        "SAMEDENT": parse_SAMEDENT,
        "INDENT": parse_INDENT,
        "DEDENT": parse_DEDENT
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_INDENT();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          pos2 = pos;
          result2 = parse_blank();
          if (result2 !== null) {
            result2 = (function(offset) { return undefined; })(pos2);
          }
          if (result2 === null) {
            pos = pos2;
          }
          if (result2 === null) {
            pos2 = pos;
            pos3 = pos;
            result2 = parse_SAMEDENT();
            if (result2 !== null) {
              result3 = parse_element();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result2 = (function(offset, e) { return e; })(pos2, result2[1]);
            }
            if (result2 === null) {
              pos = pos2;
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              result2 = parse_blank();
              if (result2 !== null) {
                result2 = (function(offset) { return undefined; })(pos2);
              }
              if (result2 === null) {
                pos = pos2;
              }
              if (result2 === null) {
                pos2 = pos;
                pos3 = pos;
                result2 = parse_SAMEDENT();
                if (result2 !== null) {
                  result3 = parse_element();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos3;
                  }
                } else {
                  result2 = null;
                  pos = pos3;
                }
                if (result2 !== null) {
                  result2 = (function(offset, e) { return e; })(pos2, result2[1]);
                }
                if (result2 === null) {
                  pos = pos2;
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, es) { return new nodes.Document(es.filter(function (e) { return e !== undefined; })); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_element() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1, pos2, pos3, pos4, pos5;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "!!!") {
          result0 = "!!!";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"!!!\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_line();
          if (result1 !== null) {
            result2 = parse_EOS();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, l) { return new nodes.Doctype(l); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 124) {
            result0 = "|";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"|\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_line();
            if (result1 !== null) {
              result2 = parse_EOS();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, l) { return new nodes.Text(l); })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 45) {
              result0 = "-";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_line();
              if (result1 !== null) {
                result2 = parse_EOS();
                if (result2 !== null) {
                  result3 = parse_children();
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, l, es) { return new nodes.Code(l, es === "" ? [] : es); })(pos0, result0[1], result0[3]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.charCodeAt(pos) === 61) {
                result0 = "=";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_line();
                if (result1 !== null) {
                  result2 = parse_EOS();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, l) { return new nodes.Echo(l); })(pos0, result0[1]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 2) === "!=") {
                  result0 = "!=";
                  pos += 2;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"!=\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_line();
                  if (result1 !== null) {
                    result2 = parse_EOS();
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, l) { return new nodes.EchoDontEscape(l); })(pos0, result0[1]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  if (input.substr(pos, 2) === "//") {
                    result0 = "//";
                    pos += 2;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"//\"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse_line();
                    if (result1 !== null) {
                      result2 = parse_EOS();
                      if (result2 !== null) {
                        result3 = parse_children();
                        result3 = result3 !== null ? result3 : "";
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, l, es) { return new nodes.Comment(l, es === "" ? [] : es); })(pos0, result0[1], result0[3]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    pos1 = pos;
                    pos2 = pos;
                    result0 = parse_id();
                    if (result0 !== null) {
                      result0 = (function(offset, t) { return new nodes.Tag(t); })(pos2, result0);
                    }
                    if (result0 === null) {
                      pos = pos2;
                    }
                    result0 = result0 !== null ? result0 : "";
                    if (result0 !== null) {
                      result1 = [];
                      pos2 = pos;
                      pos3 = pos;
                      if (input.charCodeAt(pos) === 35) {
                        result2 = "#";
                        pos++;
                      } else {
                        result2 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"#\"");
                        }
                      }
                      if (result2 !== null) {
                        result3 = parse_id();
                        if (result3 !== null) {
                          result2 = [result2, result3];
                        } else {
                          result2 = null;
                          pos = pos3;
                        }
                      } else {
                        result2 = null;
                        pos = pos3;
                      }
                      if (result2 !== null) {
                        result2 = (function(offset, id) { return [ "id", id ]; })(pos2, result2[1]);
                      }
                      if (result2 === null) {
                        pos = pos2;
                      }
                      if (result2 === null) {
                        pos2 = pos;
                        pos3 = pos;
                        if (input.charCodeAt(pos) === 46) {
                          result2 = ".";
                          pos++;
                        } else {
                          result2 = null;
                          if (reportFailures === 0) {
                            matchFailed("\".\"");
                          }
                        }
                        if (result2 !== null) {
                          result3 = parse_id();
                          if (result3 !== null) {
                            result2 = [result2, result3];
                          } else {
                            result2 = null;
                            pos = pos3;
                          }
                        } else {
                          result2 = null;
                          pos = pos3;
                        }
                        if (result2 !== null) {
                          result2 = (function(offset, cls) { return [ "class", cls ]; })(pos2, result2[1]);
                        }
                        if (result2 === null) {
                          pos = pos2;
                        }
                      }
                      while (result2 !== null) {
                        result1.push(result2);
                        pos2 = pos;
                        pos3 = pos;
                        if (input.charCodeAt(pos) === 35) {
                          result2 = "#";
                          pos++;
                        } else {
                          result2 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"#\"");
                          }
                        }
                        if (result2 !== null) {
                          result3 = parse_id();
                          if (result3 !== null) {
                            result2 = [result2, result3];
                          } else {
                            result2 = null;
                            pos = pos3;
                          }
                        } else {
                          result2 = null;
                          pos = pos3;
                        }
                        if (result2 !== null) {
                          result2 = (function(offset, id) { return [ "id", id ]; })(pos2, result2[1]);
                        }
                        if (result2 === null) {
                          pos = pos2;
                        }
                        if (result2 === null) {
                          pos2 = pos;
                          pos3 = pos;
                          if (input.charCodeAt(pos) === 46) {
                            result2 = ".";
                            pos++;
                          } else {
                            result2 = null;
                            if (reportFailures === 0) {
                              matchFailed("\".\"");
                            }
                          }
                          if (result2 !== null) {
                            result3 = parse_id();
                            if (result3 !== null) {
                              result2 = [result2, result3];
                            } else {
                              result2 = null;
                              pos = pos3;
                            }
                          } else {
                            result2 = null;
                            pos = pos3;
                          }
                          if (result2 !== null) {
                            result2 = (function(offset, cls) { return [ "class", cls ]; })(pos2, result2[1]);
                          }
                          if (result2 === null) {
                            pos = pos2;
                          }
                        }
                      }
                      if (result1 !== null) {
                        result2 = (function(offset, tag, idCls) { return tag || idCls.length; })(pos, result0, result1) ? "" : null;
                        if (result2 !== null) {
                          pos2 = pos;
                          pos3 = pos;
                          if (input.charCodeAt(pos) === 40) {
                            result3 = "(";
                            pos++;
                          } else {
                            result3 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"(\"");
                            }
                          }
                          if (result3 !== null) {
                            pos4 = pos;
                            pos5 = pos;
                            result5 = parse_id();
                            if (result5 !== null) {
                              result6 = parse___();
                              if (result6 !== null) {
                                if (input.charCodeAt(pos) === 61) {
                                  result7 = "=";
                                  pos++;
                                } else {
                                  result7 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"=\"");
                                  }
                                }
                                if (result7 !== null) {
                                  result8 = parse___();
                                  if (result8 !== null) {
                                    result9 = parse_attribute();
                                    if (result9 !== null) {
                                      result5 = [result5, result6, result7, result8, result9];
                                    } else {
                                      result5 = null;
                                      pos = pos5;
                                    }
                                  } else {
                                    result5 = null;
                                    pos = pos5;
                                  }
                                } else {
                                  result5 = null;
                                  pos = pos5;
                                }
                              } else {
                                result5 = null;
                                pos = pos5;
                              }
                            } else {
                              result5 = null;
                              pos = pos5;
                            }
                            if (result5 !== null) {
                              result5 = (function(offset, name, value) { return [ name, new nodes.Code(value) ]; })(pos4, result5[0], result5[4]);
                            }
                            if (result5 === null) {
                              pos = pos4;
                            }
                            if (result5 !== null) {
                              result4 = [];
                              while (result5 !== null) {
                                result4.push(result5);
                                pos4 = pos;
                                pos5 = pos;
                                result5 = parse_id();
                                if (result5 !== null) {
                                  result6 = parse___();
                                  if (result6 !== null) {
                                    if (input.charCodeAt(pos) === 61) {
                                      result7 = "=";
                                      pos++;
                                    } else {
                                      result7 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"=\"");
                                      }
                                    }
                                    if (result7 !== null) {
                                      result8 = parse___();
                                      if (result8 !== null) {
                                        result9 = parse_attribute();
                                        if (result9 !== null) {
                                          result5 = [result5, result6, result7, result8, result9];
                                        } else {
                                          result5 = null;
                                          pos = pos5;
                                        }
                                      } else {
                                        result5 = null;
                                        pos = pos5;
                                      }
                                    } else {
                                      result5 = null;
                                      pos = pos5;
                                    }
                                  } else {
                                    result5 = null;
                                    pos = pos5;
                                  }
                                } else {
                                  result5 = null;
                                  pos = pos5;
                                }
                                if (result5 !== null) {
                                  result5 = (function(offset, name, value) { return [ name, new nodes.Code(value) ]; })(pos4, result5[0], result5[4]);
                                }
                                if (result5 === null) {
                                  pos = pos4;
                                }
                              }
                            } else {
                              result4 = null;
                            }
                            if (result4 !== null) {
                              if (input.charCodeAt(pos) === 41) {
                                result5 = ")";
                                pos++;
                              } else {
                                result5 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (result5 !== null) {
                                result3 = [result3, result4, result5];
                              } else {
                                result3 = null;
                                pos = pos3;
                              }
                            } else {
                              result3 = null;
                              pos = pos3;
                            }
                          } else {
                            result3 = null;
                            pos = pos3;
                          }
                          if (result3 !== null) {
                            result3 = (function(offset, a) { return a; })(pos2, result3[1]);
                          }
                          if (result3 === null) {
                            pos = pos2;
                          }
                          result3 = result3 !== null ? result3 : "";
                          if (result3 !== null) {
                            pos2 = pos;
                            pos3 = pos;
                            if (input.charCodeAt(pos) === 61) {
                              result4 = "=";
                              pos++;
                            } else {
                              result4 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"=\"");
                              }
                            }
                            if (result4 !== null) {
                              result5 = parse_line();
                              if (result5 !== null) {
                                result4 = [result4, result5];
                              } else {
                                result4 = null;
                                pos = pos3;
                              }
                            } else {
                              result4 = null;
                              pos = pos3;
                            }
                            if (result4 !== null) {
                              result4 = (function(offset, l) { return new nodes.Echo(l); })(pos2, result4[1]);
                            }
                            if (result4 === null) {
                              pos = pos2;
                            }
                            if (result4 === null) {
                              pos2 = pos;
                              pos3 = pos;
                              if (input.substr(pos, 2) === "!=") {
                                result4 = "!=";
                                pos += 2;
                              } else {
                                result4 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"!=\"");
                                }
                              }
                              if (result4 !== null) {
                                result5 = parse_line();
                                if (result5 !== null) {
                                  result4 = [result4, result5];
                                } else {
                                  result4 = null;
                                  pos = pos3;
                                }
                              } else {
                                result4 = null;
                                pos = pos3;
                              }
                              if (result4 !== null) {
                                result4 = (function(offset, l) { return new nodes.EchoDontEscape(l); })(pos2, result4[1]);
                              }
                              if (result4 === null) {
                                pos = pos2;
                              }
                              if (result4 === null) {
                                pos2 = pos;
                                pos3 = pos;
                                if (input.charCodeAt(pos) === 58) {
                                  result4 = ":";
                                  pos++;
                                } else {
                                  result4 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\":\"");
                                  }
                                }
                                if (result4 !== null) {
                                  result5 = [];
                                  if (/^[ \t]/.test(input.charAt(pos))) {
                                    result6 = input.charAt(pos);
                                    pos++;
                                  } else {
                                    result6 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("[ \\t]");
                                    }
                                  }
                                  while (result6 !== null) {
                                    result5.push(result6);
                                    if (/^[ \t]/.test(input.charAt(pos))) {
                                      result6 = input.charAt(pos);
                                      pos++;
                                    } else {
                                      result6 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("[ \\t]");
                                      }
                                    }
                                  }
                                  if (result5 !== null) {
                                    result6 = parse_element();
                                    if (result6 !== null) {
                                      result4 = [result4, result5, result6];
                                    } else {
                                      result4 = null;
                                      pos = pos3;
                                    }
                                  } else {
                                    result4 = null;
                                    pos = pos3;
                                  }
                                } else {
                                  result4 = null;
                                  pos = pos3;
                                }
                                if (result4 !== null) {
                                  result4 = (function(offset, e) { return e; })(pos2, result4[2]);
                                }
                                if (result4 === null) {
                                  pos = pos2;
                                }
                                if (result4 === null) {
                                  pos2 = pos;
                                  result4 = parse_line();
                                  if (result4 !== null) {
                                    result4 = (function(offset, l) { if (l.length > 0) { return new nodes.Text(l); } else { return undefined; } })(pos2, result4);
                                  }
                                  if (result4 === null) {
                                    pos = pos2;
                                  }
                                }
                              }
                            }
                            result4 = result4 !== null ? result4 : "";
                            if (result4 !== null) {
                              result5 = parse_EOS();
                              if (result5 !== null) {
                                result6 = parse_children();
                                result6 = result6 !== null ? result6 : "";
                                if (result6 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, tag, idCls, attrs, inline, es) {
                            if (tag === "") {
                                tag = new nodes.Tag;
                            }
                    
                            if (tag.isVoid() && tag.content.length) {
                                throw new SyntaxError("Tag " + tag.name + " is void, it cannot have any content.");
                            }
                    
                            if (tag.isRaw()) {
                                for (var i in tag.content) {
                                    if (tag.content[i] instanceof nodes.Code ||
                                        tag.content[i] instanceof nodes.Text ||
                                        tag.content[i] instanceof nodes.Echo ||
                                        tag.content[i] instanceof nodes.EchoDontEscape) { continue; }
                    
                                    throw new SyntaxError("Tag " + tag.name + " is raw, it can contain only text, code, and echo content.");
                                }
                            }
                    
                            for (var i in idCls) {
                                tag.addAttribute(idCls[i][0], idCls[i][1]);
                            }
                    
                            if (attrs) {
                                for (var i in attrs) {
                                    tag.addAttribute(attrs[i][0], attrs[i][1]);
                                }
                            }
                    
                            if (inline) {
                                tag.content.push(inline);
                            }
                    
                            if (es) {
                                for (var i in es) {
                                    tag.content.push(es[i]);
                                }
                            }
                    
                            return tag;
                        })(pos0, result0[0], result0[1], result0[3], result0[4], result0[6]);
                    }
                    if (result0 === null) {
                      pos = pos0;
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_children() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_blank();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_blank();
        }
        if (result0 !== null) {
          result1 = parse_INDENT();
          if (result1 !== null) {
            pos2 = pos;
            result3 = parse_blank();
            if (result3 !== null) {
              result3 = (function(offset) { return undefined; })(pos2);
            }
            if (result3 === null) {
              pos = pos2;
            }
            if (result3 === null) {
              pos2 = pos;
              pos3 = pos;
              result3 = parse_SAMEDENT();
              if (result3 !== null) {
                result4 = parse_element();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos3;
                }
              } else {
                result3 = null;
                pos = pos3;
              }
              if (result3 !== null) {
                result3 = (function(offset, e) { return e; })(pos2, result3[1]);
              }
              if (result3 === null) {
                pos = pos2;
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                result3 = parse_blank();
                if (result3 !== null) {
                  result3 = (function(offset) { return undefined; })(pos2);
                }
                if (result3 === null) {
                  pos = pos2;
                }
                if (result3 === null) {
                  pos2 = pos;
                  pos3 = pos;
                  result3 = parse_SAMEDENT();
                  if (result3 !== null) {
                    result4 = parse_element();
                    if (result4 !== null) {
                      result3 = [result3, result4];
                    } else {
                      result3 = null;
                      pos = pos3;
                    }
                  } else {
                    result3 = null;
                    pos = pos3;
                  }
                  if (result3 !== null) {
                    result3 = (function(offset, e) { return e; })(pos2, result3[1]);
                  }
                  if (result3 === null) {
                    pos = pos2;
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_DEDENT();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, es) { return es.filter(function (e) { return e !== undefined; }); })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_id() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[a-zA-Z0-9_\-]/.test(input.charAt(pos))) {
          result2 = input.charAt(pos);
          pos++;
        } else {
          result2 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9_\\-]");
          }
        }
        if (result2 !== null) {
          result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (/^[a-zA-Z0-9_\-]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z0-9_\\-]");
              }
            }
          }
        } else {
          result1 = null;
        }
        if (result1 !== null) {
          result1 = (function(offset, cs) { return cs.join(""); })(pos1, result1);
        }
        if (result1 === null) {
          pos = pos1;
        }
        if (result1 === null) {
          pos1 = pos;
          pos2 = pos;
          if (input.charCodeAt(pos) === 58) {
            result1 = ":";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            pos3 = pos;
            reportFailures++;
            if (/^[a-zA-Z0-9_\-]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z0-9_\\-]");
              }
            }
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos3;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result1 = (function(offset) { return ":"; })(pos1);
          }
          if (result1 === null) {
            pos = pos1;
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos1 = pos;
            if (/^[a-zA-Z0-9_\-]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z0-9_\\-]");
              }
            }
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                if (/^[a-zA-Z0-9_\-]/.test(input.charAt(pos))) {
                  result2 = input.charAt(pos);
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("[a-zA-Z0-9_\\-]");
                  }
                }
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result1 = (function(offset, cs) { return cs.join(""); })(pos1, result1);
            }
            if (result1 === null) {
              pos = pos1;
            }
            if (result1 === null) {
              pos1 = pos;
              pos2 = pos;
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
              if (result1 !== null) {
                pos3 = pos;
                reportFailures++;
                if (/^[a-zA-Z0-9_\-]/.test(input.charAt(pos))) {
                  result2 = input.charAt(pos);
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("[a-zA-Z0-9_\\-]");
                  }
                }
                reportFailures--;
                if (result2 !== null) {
                  result2 = "";
                  pos = pos3;
                } else {
                  result2 = null;
                }
                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              if (result1 !== null) {
                result1 = (function(offset) { return ":"; })(pos1);
              }
              if (result1 === null) {
                pos = pos1;
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, id) { return id.join(""); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse___() {
        var result0, result1;
        
        result0 = [];
        if (/^[ \t\r\n]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\r\\n]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[ \t\r\n]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[ \\t\\r\\n]");
            }
          }
        }
        return result0;
      }
      
      function parse_attribute() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        pos3 = pos;
        reportFailures++;
        pos4 = pos;
        result1 = parse_id();
        if (result1 !== null) {
          result2 = parse___();
          if (result2 !== null) {
            if (input.charCodeAt(pos) === 61) {
              result3 = "=";
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (result3 !== null) {
              result1 = [result1, result2, result3];
            } else {
              result1 = null;
              pos = pos4;
            }
          } else {
            result1 = null;
            pos = pos4;
          }
        } else {
          result1 = null;
          pos = pos4;
        }
        reportFailures--;
        if (result1 === null) {
          result1 = "";
        } else {
          result1 = null;
          pos = pos3;
        }
        if (result1 !== null) {
          pos3 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 40) {
            result2 = "(";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            pos3 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 41) {
              result3 = ")";
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\")\"");
              }
            }
            reportFailures--;
            if (result3 === null) {
              result3 = "";
            } else {
              result3 = null;
              pos = pos3;
            }
            if (result3 !== null) {
              if (input.length > pos) {
                result4 = input.charAt(pos);
                pos++;
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result4 !== null) {
                result1 = [result1, result2, result3, result4];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
        } else {
          result1 = null;
          pos = pos2;
        }
        if (result1 !== null) {
          result1 = (function(offset, c) { return c; })(pos1, result1[3]);
        }
        if (result1 === null) {
          pos = pos1;
        }
        if (result1 === null) {
          pos1 = pos;
          pos2 = pos;
          if (input.charCodeAt(pos) === 40) {
            result1 = "(";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_braced();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 41) {
                result3 = ")";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result1 = (function(offset, b) { return "(" + b + ")"; })(pos1, result1[1]);
          }
          if (result1 === null) {
            pos = pos1;
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos1 = pos;
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            pos4 = pos;
            result1 = parse_id();
            if (result1 !== null) {
              result2 = parse___();
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 61) {
                  result3 = "=";
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                if (result3 !== null) {
                  result1 = [result1, result2, result3];
                } else {
                  result1 = null;
                  pos = pos4;
                }
              } else {
                result1 = null;
                pos = pos4;
              }
            } else {
              result1 = null;
              pos = pos4;
            }
            reportFailures--;
            if (result1 === null) {
              result1 = "";
            } else {
              result1 = null;
              pos = pos3;
            }
            if (result1 !== null) {
              pos3 = pos;
              reportFailures++;
              if (input.charCodeAt(pos) === 40) {
                result2 = "(";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                pos3 = pos;
                reportFailures++;
                if (input.charCodeAt(pos) === 41) {
                  result3 = ")";
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                reportFailures--;
                if (result3 === null) {
                  result3 = "";
                } else {
                  result3 = null;
                  pos = pos3;
                }
                if (result3 !== null) {
                  if (input.length > pos) {
                    result4 = input.charAt(pos);
                    pos++;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("any character");
                    }
                  }
                  if (result4 !== null) {
                    result1 = [result1, result2, result3, result4];
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
            if (result1 !== null) {
              result1 = (function(offset, c) { return c; })(pos1, result1[3]);
            }
            if (result1 === null) {
              pos = pos1;
            }
            if (result1 === null) {
              pos1 = pos;
              pos2 = pos;
              if (input.charCodeAt(pos) === 40) {
                result1 = "(";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_braced();
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 41) {
                    result3 = ")";
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result3 !== null) {
                    result1 = [result1, result2, result3];
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              if (result1 !== null) {
                result1 = (function(offset, b) { return "(" + b + ")"; })(pos1, result1[1]);
              }
              if (result1 === null) {
                pos = pos1;
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, cs) { return cs.join("").trim(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_braced() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        pos3 = pos;
        reportFailures++;
        if (input.charCodeAt(pos) === 40) {
          result1 = "(";
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        reportFailures--;
        if (result1 === null) {
          result1 = "";
        } else {
          result1 = null;
          pos = pos3;
        }
        if (result1 !== null) {
          pos3 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 41) {
            result2 = ")";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\")\"");
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            if (input.length > pos) {
              result3 = input.charAt(pos);
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result3 !== null) {
              result1 = [result1, result2, result3];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
        } else {
          result1 = null;
          pos = pos2;
        }
        if (result1 !== null) {
          result1 = (function(offset, c) { return c; })(pos1, result1[2]);
        }
        if (result1 === null) {
          pos = pos1;
        }
        if (result1 === null) {
          pos1 = pos;
          pos2 = pos;
          if (input.charCodeAt(pos) === 40) {
            result1 = "(";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_braced();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 41) {
                result3 = ")";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result1 = (function(offset, b) { return "(" + b + ")"; })(pos1, result1[1]);
          }
          if (result1 === null) {
            pos = pos1;
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos1 = pos;
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 40) {
              result1 = "(";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            reportFailures--;
            if (result1 === null) {
              result1 = "";
            } else {
              result1 = null;
              pos = pos3;
            }
            if (result1 !== null) {
              pos3 = pos;
              reportFailures++;
              if (input.charCodeAt(pos) === 41) {
                result2 = ")";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                if (input.length > pos) {
                  result3 = input.charAt(pos);
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("any character");
                  }
                }
                if (result3 !== null) {
                  result1 = [result1, result2, result3];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
            if (result1 !== null) {
              result1 = (function(offset, c) { return c; })(pos1, result1[2]);
            }
            if (result1 === null) {
              pos = pos1;
            }
            if (result1 === null) {
              pos1 = pos;
              pos2 = pos;
              if (input.charCodeAt(pos) === 40) {
                result1 = "(";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_braced();
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 41) {
                    result3 = ")";
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result3 !== null) {
                    result1 = [result1, result2, result3];
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              if (result1 !== null) {
                result1 = (function(offset, b) { return "(" + b + ")"; })(pos1, result1[1]);
              }
              if (result1 === null) {
                pos = pos1;
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, cs) { return cs.join(""); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_line() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        result0 = [];
        pos1 = pos;
        pos2 = pos;
        pos3 = pos;
        reportFailures++;
        result1 = parse_EOL();
        reportFailures--;
        if (result1 === null) {
          result1 = "";
        } else {
          result1 = null;
          pos = pos3;
        }
        if (result1 !== null) {
          if (input.length > pos) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = pos2;
          }
        } else {
          result1 = null;
          pos = pos2;
        }
        if (result1 !== null) {
          result1 = (function(offset, c) { return c; })(pos1, result1[1]);
        }
        if (result1 === null) {
          pos = pos1;
        }
        while (result1 !== null) {
          result0.push(result1);
          pos1 = pos;
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result1 = parse_EOL();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos3;
          }
          if (result1 !== null) {
            if (input.length > pos) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result1 = (function(offset, c) { return c; })(pos1, result1[1]);
          }
          if (result1 === null) {
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, cs) { return cs.join("").trim(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_blank() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        if (/^[ \t]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[ \t]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[ \\t]");
            }
          }
        }
        if (result0 !== null) {
          result1 = parse_EOL();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_EOL() {
        var result0;
        
        if (input.substr(pos, 2) === "\r\n") {
          result0 = "\r\n";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\r\\n\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 10) {
            result0 = "\n";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 13) {
              result0 = "\r";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\r\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_EOS() {
        var result0;
        var pos0;
        
        result0 = parse_EOL();
        if (result0 === null) {
          pos0 = pos;
          reportFailures++;
          if (input.length > pos) {
            result0 = input.charAt(pos);
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          reportFailures--;
          if (result0 === null) {
            result0 = "";
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_SAMEDENT() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        if (/^[ \t]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[ \t]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[ \\t]");
            }
          }
        }
        if (result0 !== null) {
          result1 = (function(offset, i) { return i.join("") === indent; })(pos, result0) ? "" : null;
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_INDENT() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[ \t]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[ \t]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[ \\t]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = (function(offset, i) { return i.length > indent.length; })(pos, result0) ? "" : null;
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, i) { indentStack.push(indent); indent = i.join(""); pos = offset; })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DEDENT() {
        var result0;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        if (result0 !== null) {
          result0 = (function(offset) { indent = indentStack.pop(); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
       var nodes = require("./nodes"), indentStack = [], indent = ""; 
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
